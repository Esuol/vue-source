(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{155:function(t,s,e){"use strict";e.r(s);var n=e(0),a=Object(n.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),e("p",[e("a",{attrs:{href:"https://flow.org/en/docs/getting-started/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Flow"),e("OutboundLink")],1),t._v(" 是 facebook 出品的 JavaScript 静态类型检查工具。Vue.js 的源码利用了 Flow 做了静态类型检查，所以了解 Flow 有助于我们阅读源码。")]),t._m(1),e("p",[t._v("通常类型检查分成 2 种方式：")]),t._m(2),t._m(3),e("p",[t._v("它不需要任何代码修改即可进行类型检查，最小化开发者的工作量。它不会强制你改变开发习惯，因为它会自动推断出变量的类型。这就是所谓的类型推断，Flow 最重要的特性之一。")]),e("p",[t._v("通过一个简单例子说明一下：")]),t._m(4),t._m(5),t._m(6),t._m(7),e("p",[t._v("在 Vue.js 的主目录下有 "),e("code",[t._v(".flowconfig")]),t._v(" 文件， 它是 Flow 的配置文件，感兴趣的同学可以看"),e("a",{attrs:{href:"https://flow.org/en/docs/config/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),e("OutboundLink")],1),t._v("。这其中的 "),e("code",[t._v("[libs]")]),t._v(" 部分用来描述包含指定库定义的目录，默认是名为 "),e("code",[t._v("flow-typed")]),t._v(" 的目录。")]),t._m(8),t._m(9),e("p",[t._v("可以看到，Vue.js 有很多自定义类型的定义，在阅读源码的时候，如果遇到某个类型并想了解它完整的数据结构的时候，可以回来翻阅这些数据结构的定义。")]),t._m(10),e("p",[t._v("通过对 Flow 的认识，有助于我们阅读 Vue 的源码，并且这种静态类型检查的方式非常有利于大型项目源码的开发和维护。类似 Flow 的工具还有如 TypeScript，感兴趣的同学也可以自行去了解一下。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"认识-flow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#认识-flow","aria-hidden":"true"}},[this._v("#")]),this._v(" 认识 Flow")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"flow-的工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flow-的工作方式","aria-hidden":"true"}},[this._v("#")]),this._v(" Flow 的工作方式")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[s("strong",[this._v("类型推断")]),this._v("：通过变量的使用上下文来推断出变量类型，然后根据这些推断来检查类型。")])]),s("li",[s("p",[s("strong",[this._v("类型注释")]),this._v("：事先注释好我们期待的类型，Flow 会基于这些注释来判断。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"类型推断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型推断","aria-hidden":"true"}},[this._v("#")]),this._v(" 类型推断")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*@flow*/")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Flow 检查上述代码后会报错，因为函数 "),s("code",[this._v("split")]),this._v("\n期待的参数是字符串，而我们输入了数字。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"flow-在-vue-js-源码中的应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flow-在-vue-js-源码中的应用","aria-hidden":"true"}},[this._v("#")]),this._v(" Flow 在 Vue.js 源码中的应用")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("有时候我们想引用第三方库，或者自定义一些类型，但 Flow 并不认识，因此检查的时候会报错。为了解决这类问题，Flow 提出了一个 "),s("code",[this._v("libdef")]),this._v(" 的概念，可以用来识别这些第三方库或者是自定义类型，而 Vue.js 也利用了这一特性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里 "),s("code",[this._v("[libs]")]),this._v(" 配置的是 "),s("code",[this._v("flow")]),this._v("，表示指定的库定义都在 "),s("code",[this._v("flow")]),this._v(" 文件夹内。我们打开这个目录，会发现文件如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("flow\n├── compiler.js        # 编译相关\n├── component.js       # 组件数据结构\n├── global-api.js      # Global API 结构\n├── modules.js         # 第三方库定义\n├── options.js         # 选项相关\n├── ssr.js             # 服务端渲染相关\n├── vnode.js           # 虚拟 node 相关\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])}],!1,null,null,null);s.default=a.exports}}]);